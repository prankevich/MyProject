// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/prankevich/MyProject/internal/models"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// CreateEmployees mocks base method.
func (m *MockServiceI) CreateEmployees(users models.Employees) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployees", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployees indicates an expected call of CreateEmployees.
func (mr *MockServiceIMockRecorder) CreateEmployees(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployees", reflect.TypeOf((*MockServiceI)(nil).CreateEmployees), users)
}

// DeleteEmployeesByID mocks base method.
func (m *MockServiceI) DeleteEmployeesByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeesByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployeesByID indicates an expected call of DeleteEmployeesByID.
func (mr *MockServiceIMockRecorder) DeleteEmployeesByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeesByID", reflect.TypeOf((*MockServiceI)(nil).DeleteEmployeesByID), id)
}

// GetAllEmployees mocks base method.
func (m *MockServiceI) GetAllEmployees() ([]models.Employees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees")
	ret0, _ := ret[0].([]models.Employees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockServiceIMockRecorder) GetAllEmployees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockServiceI)(nil).GetAllEmployees))
}

// GetEmployeesByID mocks base method.
func (m *MockServiceI) GetEmployeesByID(id int) (models.Employees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeesByID", id)
	ret0, _ := ret[0].(models.Employees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesByID indicates an expected call of GetEmployeesByID.
func (mr *MockServiceIMockRecorder) GetEmployeesByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesByID", reflect.TypeOf((*MockServiceI)(nil).GetEmployeesByID), id)
}

// UpdateEmployeesByID mocks base method.
func (m *MockServiceI) UpdateEmployeesByID(users models.Employees) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeesByID", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployeesByID indicates an expected call of UpdateEmployeesByID.
func (mr *MockServiceIMockRecorder) UpdateEmployeesByID(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeesByID", reflect.TypeOf((*MockServiceI)(nil).UpdateEmployeesByID), users)
}

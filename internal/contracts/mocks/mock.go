// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/prankevich/MyProject/internal/models"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// CreateUsersByID mocks base method.
func (m *MockServiceI) CreateUsersByID(users models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsersByID", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUsersByID indicates an expected call of CreateUsersByID.
func (mr *MockServiceIMockRecorder) CreateUsersByID(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersByID", reflect.TypeOf((*MockServiceI)(nil).CreateUsersByID), users)
}

// DeleteUsersByID mocks base method.
func (m *MockServiceI) DeleteUsersByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsersByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsersByID indicates an expected call of DeleteUsersByID.
func (mr *MockServiceIMockRecorder) DeleteUsersByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsersByID", reflect.TypeOf((*MockServiceI)(nil).DeleteUsersByID), id)
}

// GetAllUsers mocks base method.
func (m *MockServiceI) GetAllUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockServiceIMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockServiceI)(nil).GetAllUsers))
}

// GetUsersByID mocks base method.
func (m *MockServiceI) GetUsersByID(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByID", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByID indicates an expected call of GetUsersByID.
func (mr *MockServiceIMockRecorder) GetUsersByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByID", reflect.TypeOf((*MockServiceI)(nil).GetUsersByID), id)
}

// UpdateUsersByID mocks base method.
func (m *MockServiceI) UpdateUsersByID(users models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersByID", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsersByID indicates an expected call of UpdateUsersByID.
func (mr *MockServiceIMockRecorder) UpdateUsersByID(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersByID", reflect.TypeOf((*MockServiceI)(nil).UpdateUsersByID), users)
}
